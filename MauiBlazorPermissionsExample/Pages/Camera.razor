@page "/camera"

@implements IAsyncDisposable

@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<h1>Camera</h1>

@if (_lastError is not null)
{
    <p>
        Could not start video: @_lastError
    </p>

    if (HasReloaded == true)
    {
        <p>
            You may need to open the settings app to enable camera access for this app
        </p>
    }

    <button @onclick="Reload">Reload</button>
}

<video @ref="_videoReference" style="width: 100%;">The current WebView does not support video.</video>

@code {
    private ElementReference? _videoReference;
    private string? _lastError;

    [Parameter]
    [SupplyParameterFromQuery(Name = "reloaded")]
    public bool? HasReloaded { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _lastError = await JS.InvokeAsync<string?>("startCameraFeed", _videoReference);
            StateHasChanged();
        }
    }

    private void Reload()
    {
        var reloadedUri = NavigationManager.GetUriWithQueryParameter("reloaded", true);
        NavigationManager.NavigateTo(reloadedUri, true);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await JS.InvokeVoidAsync("stopCameraFeed", _videoReference);
    }
}
